
{

/**
  *@param args : it takes string array as arguments 
 **/
	
	public static void main(String[] args) 
	
	{
		//creating main object for Queue using linkedlist class  
		QueueUsingLinkedList<QueueUsingLinkedList<Integer>> queue = new QueueUsingLinkedList<QueueUsingLinkedList<Integer>>();
		//creating sub  object for Queue using linkedlist class to store week days  
		QueueUsingLinkedList<Integer> qll = new QueueUsingLinkedList<Integer>();
		System.out.println("enter month");
		// calling method to take month from user
		final int MONTH = Utility.scanInt();
		System.out.println("enter year");
		// calling method to take year from user
		final int YEAR = Utility.scanInt();
		//validating year and month 
		if ((MONTH<=12&&MONTH>=1)&&(YEAR>=1000&&YEAR<=9999))
		{
			//calling getday method to find the starting day of month
			final int START_DAY = Utility.getDay(MONTH, YEAR);
			// storing number of days containing in each month
			final int MONTH_ARR[] = {31,28,30,31,30,31,31,31,30,31,30,31};
			System.out.println("sun"+"\t"+"mon"+"\t"+"tue"+"\t"+"wed"+"\t"+"thus"+"\t"+"fri"+"\t"+"sat");
			// condition for checking year is a leap year are not
			if(YEAR%4==0 && YEAR%100!= 0 || YEAR%400==0)
				
			{
				MONTH_ARR[1]=29;
			}
			/*this for is to store days to sub queues and storing sub queues in main queue*/
			for (int i = 1; i <= MONTH_ARR[MONTH-1]; i++) 
			{
				qll.insert(i);//calling insert method to insert elements in to object
				//condition to create new sub queue
				if (((i + START_DAY) % 7 == 0 || i==MONTH_ARR[MONTH-1]) ) 
				{
					queue.insert(qll);// inserting subqueue to main queue 
					qll=new QueueUsingLinkedList<Integer>(); // creating new sub queue
				
               }
			
			}
			/*for to print space where there is no day falls*/
			for (int i=0;i<START_DAY;i++)
			{
				System.out.print("\t");
			}
			/*for loop to print all subqueues in main queue*/
			for (int i=0;i<queue.size;i++)
			{
				//removing top queue from main queue and coping it to variable
				QueueUsingLinkedList<Integer> week= queue.remove();
				//for loop to print ekements in sub queue
				for (int j=0;j<week.size;j++)
				{
					//printing sub object elements
					System.out.print(week.remove()+"\t");
				}
				System.out.println();
			}
		}
		else
		{
			System.err.println("please enter valid date and month");
		}
	}




<?php 
require("Utility.php");
//get prime number 0 to 1000
$arr = Utility::primeNumber();
$arr2D = array();
$index = 0;
$n = 100;
//array 0 to 10 because 10 line neened in between 0 to 1000
for ($i=0; $i < 10; $i++) { 
//array to push the value
$iArr = array();
//array to save the value in inner array
for ($j=0; $j < 100; $j++) { 
//if index reach size of array then break or when the value of index 
//elemnet is greater then $n value break 
if ($index == sizeof($arr) || $arr[$index]>$n ) {
break;
}
$iArr[$j] = $arr[$index++];
}
//after every loop increase by 100
$n += 100;
array_push($arr2D,$iArr);
}
// print all anagram of 2d array
for ($i=0; $i < sizeof($arr2D); $i++) { 
for ($j=0; $j < sizeof($arr2D[$i]); $j++) { 
echo $arr2D[$i][$j]." ";
}
echo "\n";
}
?>




<?php
class Node
{
public $data;
public $next;
public function __construct($data,$next)
{
$this->data = $data;
$this->next = $next;
}
}
?>
<?php
/**
* Ordered linked list with its methods
* */
require 'Node.php'; 
class LinkedList
{
public $front = null;
public $last = null;
public $size = 0;
public function __construct()
{
$this->front = null;
$this->last = null;
}
/**
* Function to add the data in parameter at the start of linked list in order
* 
* @param data the data to be added
*/
public function add($data)
{
//check if list is empty
if (!$this->front) 
{
//add at first;
$node = new Node($data, null);
$this->front = $node;
$this->last = $node;
$this->size++;
} 
else 
{
//check if data is less than the data in front
if ($data < $this->front->data) 
{
$node = new Node($data,$this->front);
$this->front = $node;
$this->size++;
return;
}
//stores in desired position
$current = $this->front;
while ($current) 
{
if ($current->data < $data && isset($current->next) && $current->next->data > $data) 
{
$node = new Node($data,$current->next);
$current->next = $node;
$this->size++;
}
if ($current->data < $data && !isset($current->next)) 
{
$node = new Node($data,$current->next);
$current->next = $node;
$this->size++;
}
$current = $current->next;
}
}
}
/**
* function to remove the data given as argument removes only if data is there 
*/
public function remove($data)
{
$current = null;
$temp = null;
if($this->size==0)
{
echo "list is empty\n";
}
else if($this->front->data == $data && $this->front->next == null)
{
$this->front =null;
$this->last = null;
echo "$data removed from list\n";
$this->size--;
}
else if($this->front->data == $data && $this->front->next != null)
{
$temp = $this->front;
$this->front = $this->front->next;
$temp = null;
echo "$data removed from list\n";
$this->size--;
}
else
{
$temp = $this->front;
$current = $this->front->next;
while($current!=null)
{
if($current->data == $data)
{
$temp->next = $current->next;
$current->next = null;
echo "$data removed from list\n";
$this->size--;
break;
}
else
{
$temp = $current;
$current = $current->next;
}
}
}
}
/**
* function to get the elements of list as string
*/
public function getString()
{
$s = "";
$node = $this->front;
while ($node != null) {

